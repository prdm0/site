ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5
y = 1.5
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5,
color = "red"
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5,
color = "red",
size = 0.9
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5,
color = "red",
size = 2
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5,
color = "red",
size = 2
) +
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2,
color = "green"
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
geom_point(
x = 2.5,
y = 1.5,
color = "red",
size = 2
) +
geom_point(
x = 2.86476,
y = 1.503992,
color = "green",
size = 2,
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
# R
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2
) +
# Julia
geom_point(
x = 2.4472234393032837,
y = 1.4480344422787308,
color = "green",
size = 2,
) +
# Python
geom_point(
x = 2.541634329050904,
y = 1.480430581806816 ,
color = "blue",
size = 2
)
library(ggplot2)
library(tidyr)
library(dplyr)
library(latex2exp)
set.seed(0)
dados <- rweibull(n = 500L, shape = 2.5, scale = 1.5)
pdf_weibull <- function(x, alpha, beta)
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
# log-verossimilhança
log_likelihood <- function(x, alpha, beta)
prod(pdf_weibull(x, alpha, beta))
vec_log_likelihood <-
Vectorize(
FUN = log_likelihood,
vectorize.args = c("alpha", "beta")
)
alpha <- seq(2.4, 2.87, length.out = length(dados))
beta <- seq(1.42, 1.56, length.out = length(dados))
df_contour <- expand_grid(alpha, beta)
df_contour <-
df_contour |>
mutate(z = vec_log_likelihood(x = dados, alpha, beta))
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
# R
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2
) +
# Julia
geom_point(
x = 2.4472234393032837,
y = 1.4480344422787308,
color = "green",
size = 2,
) +
# Python
geom_point(
x = 2.541634329050904,
y = 1.480430581806816 ,
color = "blue",
size = 2
)
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
# R
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2
)
dados
dados
dados
set.seed(0)
dados <- rweibull(n = 10L, shape = 2.5, scale = 1.5)
ls
dados
set.seed(0)
dados <- rweibull(n = 500L, shape = 2.5, scale = 1.5)
dados
dados
data.frame(dados = dados)
write.csv(data.frame(dados = dados), file = "~/Dropbox/GitHub/site/posts/likelihood_r_julia_python/dados.csv")
write.csv(data.frame(dados = dados), file = "~/Dropbox/GitHub/site/posts/likelihood_r_julia_python/dados.csv")
getwd
getwd()
write.csv(x = data.frame(dados = dados), file = "~/Dropbox/GitHub/site/posts/likelihood_r_julia_python/dados.csv")
ls
reticulate::repl_python()
library(ggplot2)
library(tidyr)
library(dplyr)
library(latex2exp)
set.seed(0)
dados <- rweibull(n = 500L, shape = 2.5, scale = 1.5)
pdf_weibull <- function(x, alpha, beta)
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
# log-verossimilhança
log_likelihood <- function(x, alpha, beta)
prod(pdf_weibull(x, alpha, beta))
vec_log_likelihood <-
Vectorize(
FUN = log_likelihood,
vectorize.args = c("alpha", "beta")
)
alpha <- seq(2.4, 2.87, length.out = length(dados))
beta <- seq(1.42, 1.56, length.out = length(dados))
df_contour <- expand_grid(alpha, beta)
df_contour <-
df_contour |>
mutate(z = vec_log_likelihood(x = dados, alpha, beta))
library(ggplot2)
library(tidyr)
library(dplyr)
library(latex2exp)
set.seed(0)
dados <- rweibull(n = 500L, shape = 2.5, scale = 1.5)
pdf_weibull <- function(x, alpha, beta)
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
# log-verossimilhança
log_likelihood <- function(x, alpha, beta)
prod(pdf_weibull(x, alpha, beta))
vec_log_likelihood <-
Vectorize(
FUN = log_likelihood,
vectorize.args = c("alpha", "beta")
)
alpha <- seq(2.4, 2.87, length.out = length(dados))
beta <- seq(1.42, 1.56, length.out = length(dados))
df_contour <- expand_grid(alpha, beta)
df_contour <-
df_contour |>
mutate(z = vec_log_likelihood(x = dados, alpha, beta))
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
# R
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2
) +
geom_point(
x = 2.642850353244295,
y = 1.488271661049081,
color = "green",
size = 2
)
library(ggplot2)
library(tidyr)
library(dplyr)
library(latex2exp)
set.seed(0)
dados <- rweibull(n = 500L, shape = 2.5, scale = 1.5)
pdf_weibull <- function(x, alpha, beta)
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
# log-verossimilhança
log_likelihood <- function(x, alpha, beta)
prod(pdf_weibull(x, alpha, beta))
vec_log_likelihood <-
Vectorize(
FUN = log_likelihood,
vectorize.args = c("alpha", "beta")
)
alpha <- seq(2.4, 2.87, length.out = length(dados))
beta <- seq(1.42, 1.56, length.out = length(dados))
df_contour <- expand_grid(alpha, beta)
df_contour <-
df_contour |>
mutate(z = vec_log_likelihood(x = dados, alpha, beta))
df_contour |>
ggplot() +
geom_contour_filled(aes(x = alpha, y = beta, z = z)) +
ggtitle(
label = "Curvas de níveis da fução de Verossimilhança",
) +
xlab(TeX(r'(\alpha)')) +
ylab(TeX(r'(\beta)')) +
labs(fill = "Níveis") +
theme(
plot.title  = element_text(face = "bold"),
legend.title = element_text(face = "bold")
) +
# R
geom_point(
x = 2.86476,
y = 1.503992,
color = "red",
size = 2
) +
geom_point(
x = 2.642850353244295,
y = 1.488271661049081,
color = "green",
size = 2
) +
geom_point(
x = 2.642850346755736,
y = 1.4882716649411558,
color = "blue",
size = 2
)
# Quantidade de observações
n <- 500L
# Parâmetros que especificam a distribuição verdadeira, i.e., distribuição
# da variável aleatória cujo os dados são observações.
alpha <- 2.5
beta <- 1.5
# Fixando uma semente para o gerador de números pseudo-aleatórios. Assim, conseguimos,
# toda vez que rodamos o código, reproduzir os mesmos dados.
set.seed(0)
# Gerando as observações. Esse será o conjunto de dados que você tera para
# modelar.
dados <- rweibull(n = n, shape = alpha, scale = beta)
pdf_weibull <- function(x, par){
alpha <- par[1]
beta <- par[2]
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
}
# Checando se a densidade de pdf_weibull integra em 1
integrate(f = pdf_weibull, lower = 0, upper = Inf, par = c(2.5, 1.5))
# Implementando uma função genérica (função objetivo)
# (função de log-verossimilhança) que iremos maximizar. Essa função
# irá receber como argumento uma função densidade de probabilidade.
# Não é preciso destrinchar (obter de forma exata) a função de
# log-verossimilhança!
# A função de log-verossimilhança encontra-se multiplicada por -1
# devido ao fato da função que iremos fazer otimização minimizar
# uma função função objetivo. Minimizar -f equivale a maximizar f.
# Lembre-se disso!
log_likelihood <- function(x, pdf, par)
-sum(log(pdf(x, par)))
result <- optim(
fn = log_likelihood,
par = c(0.5, 0.5),
method = "BFGS",
x = dados,
pdf = pdf_weibull
)
# Imprimindo os valores das estimativas de máxima verossimilhança
cat("Valores estimados de alpha e beta\n")
cat("--> alpha: ", result$par[1], "\n")
cat("--> beta: ", result$par[2], "\n")
# Quantidade de observações
n <- 500L
# Parâmetros que especificam a distribuição verdadeira, i.e., distribuição
# da variável aleatória cujo os dados são observações.
alpha <- 2.5
beta <- 1.5
# Fixando uma semente para o gerador de números pseudo-aleatórios. Assim, conseguimos,
# toda vez que rodamos o código, reproduzir os mesmos dados.
set.seed(0)
# Gerando as observações. Esse será o conjunto de dados que você tera para
# modelar.
dados <- rweibull(n = n, shape = alpha, scale = beta)
dados
dados <- data.frame(dados=dados)
dados
dados
colnames(dados)
rownames(dados)
rownames(dados) <- NULL
dados
write.csv(x = dados, file ="dados.csv", sep=",")
write.csv(x = dados, file ="dados.csv",  sep = ",")
write.csv(x = dados, file ="dados.csv",  sep = "")
write.csv(x = dados, file ="dados.csv")
# Quantidade de observações
n <- 500L
# Parâmetros que especificam a distribuição verdadeira, i.e., distribuição
# da variável aleatória cujo os dados são observações.
alpha <- 2.5
beta <- 1.5
# Fixando uma semente para o gerador de números pseudo-aleatórios. Assim, conseguimos,
# toda vez que rodamos o código, reproduzir os mesmos dados.
set.seed(0)
# Gerando as observações. Esse será o conjunto de dados que você tera para
# modelar.
dados <- rweibull(n = n, shape = alpha, scale = beta)
pdf_weibull <- function(x, par){
alpha <- par[1]
beta <- par[2]
alpha/beta * (x/beta)^(alpha-1) * exp(-(x/beta)^alpha)
}
# Checando se a densidade de pdf_weibull integra em 1
integrate(f = pdf_weibull, lower = 0, upper = Inf, par = c(2.5, 1.5))
# Implementando uma função genérica (função objetivo)
# (função de log-verossimilhança) que iremos maximizar. Essa função
# irá receber como argumento uma função densidade de probabilidade.
# Não é preciso destrinchar (obter de forma exata) a função de
# log-verossimilhança!
# A função de log-verossimilhança encontra-se multiplicada por -1
# devido ao fato da função que iremos fazer otimização minimizar
# uma função função objetivo. Minimizar -f equivale a maximizar f.
# Lembre-se disso!
log_likelihood <- function(x, pdf, par)
-sum(log(pdf(x, par)))
result <- optim(
fn = log_likelihood,
par = c(0.5, 0.5),
method = "BFGS",
x = dados,
pdf = pdf_weibull
)
# Imprimindo os valores das estimativas de máxima verossimilhança
cat("Valores estimados de alpha e beta\n")
cat("--> alpha: ", result$par[1], "\n")
cat("--> beta: ", result$par[2], "\n")
reticulate::repl_python()
